{
	"info": {
		"_postman_id": "d709bb96-abe5-49a2-9c03-f055981747bc",
		"name": "import-terms-use-case",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "35063919"
	},
	"item": [
		{
			"name": "0. Get token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(pm.response.to.have.status(200)){",
							"    console.log(\"0. Authenticated successfully.\");",
							"    var jsonData = JSON.parse(responseBody);",
							"    postman.setEnvironmentVariable(\"bearerToken\", jsonData.access_token);",
							"    postman.setEnvironmentVariable(\"access_token\", jsonData.access_token);",
							"}",
							"else {",
							"    console.log(\"Failed with status: \" + pm.response.status);",
							"}",
							" ",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set(\"prefix\", \"Sample\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Basic c2FzLmVjOg=="
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "grant_type",
							"value": "password",
							"type": "default"
						},
						{
							"key": "username",
							"value": "{{username}}",
							"type": "default"
						},
						{
							"key": "password",
							"value": "{{password}}",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "{{sasserver}}/SASLogon/oauth/token",
					"host": [
						"{{sasserver}}"
					],
					"path": [
						"SASLogon",
						"oauth",
						"token"
					]
				}
			},
			"response": []
		},
		{
			"name": "1. Create term type",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(pm.response.to.have.status(201)){",
							"    console.log(\"1. Successfully created term type.\");",
							"    var jsonData = pm.response.json();",
							"    pm.environment.set(\"termTypeId\", jsonData.id);",
							"}",
							"else {",
							"    console.log(\"1. Failed with status: \" + pm.response.status);",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{bearerToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/vnd.sas.glossary.term.type+json"
					},
					{
						"key": "Content-Type",
						"value": "application/vnd.sas.glossary.term.type+json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"{{prefix}} Term Type\",\r\n    \"description\": \"Sample Term Type with all attribute values populated\",\r\n    \"label\": \"Sample Term Type\",\r\n    \"attributes\": [\r\n    {\r\n      \"name\": \"singleLineTextAttribute\",\r\n      \"label\": \"A single-line text attribute\",\r\n      \"description\": \"This is a description of the attribute. Single-line text attributes can be up to 4000 characters long and cannot contain newline characters.\",\r\n      \"required\": true,\r\n      \"type\": \"single-line\",\r\n      \"defaultValue\": \"This is an example of a single-line text attribute.\"\r\n    },\r\n    {\r\n      \"name\": \"multiLineTextAttribute\",\r\n      \"label\": \"A multi-line text attribute\",\r\n      \"description\": \"Multi-line text attributes can be up to 4000 characters.  Newline characters are allowed.\",\r\n      \"type\": \"multi-line\",\r\n      \"defaultValue\": \"This is an example of a multi-line text attribute\\\\nwith\\\\nnewline\\\\ncharacters.\"\r\n    },\r\n    {\r\n      \"name\": \"booleanAttribute\",\r\n      \"label\": \"A boolean attribute\",\r\n      \"description\": \"Boolean attributes can be either \\\"true\\\" or \\\"false\\\"\",\r\n      \"type\": \"boolean\",\r\n      \"defaultValue\": \"true\"\r\n    },\r\n    {\r\n      \"name\": \"dateAttribute\",\r\n      \"label\": \"A date attribute\",\r\n      \"description\": \"Date attributes should be specified with the format \\\"YYYY-MM-DD\\\"\",\r\n      \"type\": \"date\"\r\n    },\r\n    {\r\n      \"name\": \"timeAttribute\",\r\n      \"label\": \"A time attribute\",\r\n      \"description\": \"Time attributes should be specified with the format \\\"hh:mm:ssZ\\\"\",\r\n      \"type\": \"time\",\r\n      \"defaultValue\": \"10:23:45Z\"\r\n    },\r\n    {\r\n      \"name\": \"dateTimeAttribute\",\r\n      \"label\": \"A date-time attribute\",\r\n      \"description\": \"Date-time attributes should be specified with the format \\\"YYYY-MM-DDThh:mm:ssZ\\\"\",\r\n      \"type\": \"date-time\",\r\n      \"defaultValue\": \"2024-02-12T10:23:45.000Z\"\r\n    },\r\n    {\r\n      \"name\": \"singleSelectAttribute\",\r\n      \"label\": \"A single-select attribute\",\r\n      \"description\": \"Single-select attributes must specify at least one item in the \\\"items\\\" field\",\r\n      \"type\": \"single-select\",\r\n      \"items\": [\r\n        \"Item 1\",\r\n        \"Item 2\",\r\n        \"Item 3\"\r\n      ],\r\n      \"defaultValue\": \"Item 1\"\r\n    }\r\n  ]\r\n}"
				},
				"url": {
					"raw": "{{sasserver}}/glossary/termTypes",
					"host": [
						"{{sasserver}}"
					],
					"path": [
						"glossary",
						"termTypes"
					]
				}
			},
			"response": []
		},
		{
			"name": "2a. Import CSV",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(pm.response.to.have.status(202)){",
							"    console.log(\"2a. Successfully created terms.\");",
							"    var jsonData = pm.response.json();",
							"    pm.environment.set(\"jobId\", jsonData.id);",
							"} ",
							"else {",
							"    console.log(\"2a. Failed with status: \" + pm.response.status);",
							"}",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{bearerToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/vnd.sas.job.execution.job+json"
					},
					{
						"key": "Content-Type",
						"value": "multipart/form-data"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "termCSV",
							"description": "If Request Fails, Switch to a file from your local repo",
							"type": "file",
							"src": "/C:/Users/anzlit/viya-catalog/doc/usecases/import.csv"
						},
						{
							"key": "updateExisting",
							"value": "true",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{sasserver}}/glossary/importTerms",
					"host": [
						"{{sasserver}}"
					],
					"path": [
						"glossary",
						"importTerms"
					]
				}
			},
			"response": []
		},
		{
			"name": "2b. Get import job",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const maxRetries = 20; // max number of tries",
							"const sleepBetweenTries = 5000; // interval between attempts",
							"const polling_states = [\"pending\", \"running\"];",
							"",
							"if (!pm.environment.get(\"tries\")) {",
							"    pm.environment.set(\"tries\", 1);",
							"}",
							"",
							"if (pm.response.to.have.status(200)) {",
							"    console.log(\"2b. Successfully retrieved job.\");",
							"    pm.environment.set(\"state\",pm.response.json().state);",
							"    console.log (\"state = \" + pm.environment.get(\"state\"));",
							"    if ((pm.response.json().state && polling_states.includes(pm.response.json().state)) && (pm.environment.get(\"tries\") < maxRetries)) {",
							"        var tries = parseInt(pm.environment.get(\"tries\"), 10);",
							"        console.log(\"tries = \" + tries)",
							"        pm.environment.set(\"tries\", tries + 1);",
							"        setTimeout(function() {}, sleepBetweenTries);",
							"        pm.execution.setNextRequest(pm.request.name); // retry the current request",
							"    } else {",
							"        pm.environment.unset(\"tries\");",
							"        pm.environment.set(\"logLocation\",pm.response.json().logLocation);",
							"    }",
							"} else { ",
							"    console.log(\"2b. Failed with status: \" + pm.response.status); ",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{bearerToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{sasserver}}/jobExecution/jobs/{{jobId}}",
					"host": [
						"{{sasserver}}"
					],
					"path": [
						"jobExecution",
						"jobs",
						"{{jobId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "2c. Get import log",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(pm.response.to.have.status(200)){\r",
							"    console.log(\"2c. Successfully retrieved log.\");\r",
							"} else {\r",
							"    console.log(\"2c. Failed with status: \" + pm.response.status);\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{bearerToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{sasserver}}/{{logLocation}}/content",
					"host": [
						"{{sasserver}}"
					],
					"path": [
						"{{logLocation}}",
						"content"
					]
				}
			},
			"response": []
		},
		{
			"name": "2d. Get terms by filter",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();",
							"if(pm.response.to.have.status(200)){",
							"    console.log(\"2d. Successfully deleted term.\");",
							"    pm.environment.set(\"termId\", jsonData.items[0].id);",
							"} else {",
							"    console.log(\"2d. Failed with status: \" + pm.response.status);",
							"}",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{bearerToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/vnd.sas.collection+json"
					}
				],
				"url": {
					"raw": "{{sasserver}}/glossary/terms?filter=startsWith(name,'{{prefix}}')&sortBy=creationTimeStamp:descending",
					"host": [
						"{{sasserver}}"
					],
					"path": [
						"glossary",
						"terms"
					],
					"query": [
						{
							"key": "filter",
							"value": "startsWith(name,'{{prefix}}')"
						},
						{
							"key": "sortBy",
							"value": "creationTimeStamp:descending"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "2e. Get and delete imported terms",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let host=pm.environment.get(\"sasserver\");",
							"let token=pm.environment.get(\"access_token\");",
							"let items = pm.response.json().items;",
							"",
							"function deleteTerms(index) {",
							"    if (index >= items.length) {",
							"        console.log('2e. All terms have been processed.');",
							"        return;",
							"    }",
							"",
							"    aTerm=items[index]",
							"    ",
							"    delLink = aTerm.links.find(link=>link.rel===\"delete\").href;",
							"",
							"    delRequest = {",
							"        url: host + delLink,",
							"        method: 'DELETE',",
							"        header: 'Authorization: bearer ' + token",
							"    };",
							"",
							"    pm.sendRequest(delRequest, function (err, response) {",
							"        if (err) {",
							"            console.error('2e. Error deleting term:', err);",
							"        } else {",
							"            console.log('2e. Deleted term with id:', aTerm.id);",
							"        }",
							"        deleteTerms(index + 1); // Proceed to the next item after the current one is processed",
							"    });",
							"}",
							"",
							"// Start the deletion process from the first item",
							"deleteTerms(0);",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{bearerToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/vnd.sas.collection+json"
					},
					{
						"key": "Accept-Item",
						"value": "application/vnd.sas.glossary.term+json"
					}
				],
				"url": {
					"raw": "{{sasserver}}/glossary/terms?filter=startsWith(name,'{{prefix}}')&limit=20&sortBy=creationTimeStamp:descending",
					"host": [
						"{{sasserver}}"
					],
					"path": [
						"glossary",
						"terms"
					],
					"query": [
						{
							"key": "filter",
							"value": "startsWith(name,'{{prefix}}')"
						},
						{
							"key": "limit",
							"value": "20"
						},
						{
							"key": "sortBy",
							"value": "creationTimeStamp:descending"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "3. Delete termType",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(pm.response.to.have.status(204)){\r",
							"    console.log(\"3. Successfully deleted term type.\");\r",
							"} else {\r",
							"    console.log(\"3. Failed with status: \" + pm.response.status);\r",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{bearerToken}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"value": "application/vnd.sas.glossary.term.type+json"
					}
				],
				"url": {
					"raw": "{{sasserver}}/glossary/termTypes/{{termTypeId}}",
					"host": [
						"{{sasserver}}"
					],
					"path": [
						"glossary",
						"termTypes",
						"{{termTypeId}}"
					]
				}
			},
			"response": []
		}
	]
}